### This file was generated by Nexus Schema
### Do not make changes to this file directly


union AuthorizeResponse = ServerError | UserNotFound | UserWithToken

type BadInput {
  message: String
  reason: String
}

union CreateUserResponse = BadInput | ServerError | Unauthorized | User

type Edge {
  node: Post
}

input GetUploadSignedUrlInput {
  fileName: String!
}

type Media {
  caption: String
  id: String
  title: String
  type: MediaType!
  url: String!
}

enum MediaType {
  IMAGE
}

type Mutation {
  authorize(name: String!, password: String!): AuthorizeResponse
  createUser(name: String!, password: String!, roleName: String!): CreateUserResponse
  savePost(input: SavePostInput!): SavePostResponse
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

type Post {
  body: String
  contributors: [User!]
  date: String
  id: String
  media: [Media!]
  title: String
}

type PostConnection {
  edges: [Edge]!
  pageInfo: PageInfo!
}

type Query {
  encryptTest(text: String!): String!
  getPostConnection: PostConnection!
  getRoles: [RoleType]!
  getUploadSignedUrl(input: GetUploadSignedUrlInput!): String!
  validateToken(token: String!): Boolean!
}

enum RoleType {
  AUNTIE
  DAD
  FRIEND
  GRANDDAD
  GRANDMA
  ME
  MUM
  NO_RELATION
  UNCLE
}

input SaveMediaInput {
  caption: String
  id: String
  title: String
  type: MediaType!
  url: String!
}

input SavePostInput {
  body: String
  date: String
  id: String
  media: [SaveMediaInput!]
  title: String!
}

union SavePostResponse = BadInput | Post | ServerError | Unauthorized

type ServerError {
  message: String
  reason: String
}

type Unauthorized {
  message: String
  reason: String
}

type User {
  id: String
  name: String
  role: String
}

type UserNotFound {
  message: String
}

type UserWithToken {
  token: String
  user: User
}
