### This file was generated by Nexus Schema
### Do not make changes to this file directly


union AuthorizeResponse = UserNotFound | UserWithToken

type BadInput {
  message: String
  reason: String
}

input CreateMediaInput {
  caption: String
  title: String
  type: MediaType!
  url: String!
}

input CreatePostInput {
  body: String
  date: String
  media: [CreateMediaInput!]
  title: String!
}

union CreatePostResponse = BadInput | Post | Unauthorized

union CreateUserResponse = BadInput | Unauthorized | User

input GetUploadSignedUrlInput {
  fileName: String!
}

type Media {
  caption: String
  id: String
  title: String
  type: MediaType
  url: String!
}

enum MediaType {
  IMAGE
}

type Mutation {
  authorize(name: String!, password: String!): AuthorizeResponse
  createPost(input: CreatePostInput!): CreatePostResponse
  createUser(name: String!, password: String!, roleName: String!): CreateUserResponse
}

type Post {
  body: String
  contributors: [User]
  date: String
  id: String
  media: [Media]
  title: String
}

type Query {
  encryptTest(text: String!): String!
  getRoles: [RoleType]!
  getUploadSignedUrl(input: GetUploadSignedUrlInput!): String!
  getUserById: User!
}

enum RoleType {
  AUNTIE
  DAD
  FRIEND
  GRANDDAD
  GRANDMA
  ME
  MUM
  NO_RELATION
  UNCLE
}

type Unauthorized {
  message: String
  reason: String
}

type User {
  id: String
  name: String
  role: String
}

type UserNotFound {
  message: String
}

type UserWithToken {
  token: String
  user: User
}
